{
  "formik-import": {
    "prefix": ["formik import"],
    "body": ["import { Formik } from 'formik'", ""],
    "scope": "javascript,javascriptreact",
    "description": "Let's face it, forms are really verbose in React. To make matters worse, most form helpers do wayyyy too much magic and often have a significant performance cost associated with them. Formik is a small library that helps you with the 3 most annoying parts: Getting values in and out of form state, Validation and error messages, Handling form submission By colocating all of the above in one place, Formik will keep things organized--making testing, refactoring, and reasoning about your forms a breeze."
  },
  "formik": {
    "prefix": ["formik component"],
    "body": [
      "<Formik",
      "      initialValues={{ name: 'jared' }}",
      "      onSubmit={(values, actions) => {",
      "        setTimeout(() => {",
      "          alert(JSON.stringify(values, null, 2));",
      "          actions.setSubmitting(false);",
      "        }, 1000);",
      "      }}",
      "    >",
      "      {props => (",
      "        <form onSubmit={props.handleSubmit}>",
      "          <input",
      "            type=\"text\"",
      "            onChange={props.handleChange}",
      "            onBlur={props.handleBlur}",
      "            value={props.values.name}",
      "            name=\"name\"",
      "          />",
      "          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}",
      "          <button type=\"submit\">Submit</button>",
      "        </form>",
      "      )}",
      "    </Formik>"
    ],
    "scope": "javascript,javascriptreact",
    "description": "<Formik> is a component that helps you with building forms. It uses a render props pattern made popular by libraries like React Motion and React Router."
  },
  "formik-use": {
    "prefix": ["formik use-formik"],
    "body": [
      "  const ${formik} = useFormik({",
      "    initialValues: {",
      "      firstName: '',",
      "      lastName: '',",
      "      email: '',",
      "    },",
      "    onSubmit: values => {",
      "      alert(JSON.stringify(values, null, 2));",
      "    },",
      "  });",
      "  return (",
      "    <form onSubmit={formik.handleSubmit}>",
      "      <label htmlFor=\"firstName\">First Name</label>",
      "      <input",
      "        id=\"firstName\"",
      "        name=\"firstName\"",
      "        type=\"text\"",
      "        onChange={formik.handleChange}",
      "        value={formik.values.firstName}",
      "      />",
      "      <label htmlFor=\"lastName\">Last Name</label>",
      "      <input",
      "        id=\"lastName\"",
      "        name=\"lastName\"",
      "        type=\"text\"",
      "        onChange={formik.handleChange}",
      "        value={formik.values.lastName}",
      "      />",
      "      <label htmlFor=\"email\">Email Address</label>",
      "      <input",
      "        id=\"email\"",
      "        name=\"email\"",
      "        type=\"email\"",
      "        onChange={formik.handleChange}",
      "        value={formik.values.email}",
      "      />",
      "      <button type=\"submit\">Submit</button>",
      "    </form>",
      "  );"
    ],
    "scope": "javascript,javascriptreact",
    "description": "useFormik() is a custom React hook that will return all Formik state and helpers directly. Despite its name, it is not meant for the majority of use cases. Internally, Formik uses useFormik to create the <Formik> component (which renders a React Context Provider). If you are trying to access Formik state via context, use useFormikContext. Only use this hook if you are NOT using <Formik> or withFormik. ** Be aware that <Field>, <FastField>, <ErrorMessage>, connect(), and <FieldArray> will NOT work with useFormik() as they all require React Context."
  },
  "formik-with": {
    "prefix": ["formik with-formik"],
    "body": [
      "const ${1:MyEnhancedForm} = withFormik({",
      "  mapPropsToValues: () => ({ name: '' }),",
      "",
      "  // Custom sync validation",
      "  validate: values => {",
      "    const errors = {};",
      "",
      "    if (!values.name) {",
      "      errors.name = 'Required';",
      "    }",
      "",
      "    return errors;",
      "  },",
      "",
      "  handleSubmit: (values, { setSubmitting }) => {",
      "    setTimeout(() => {",
      "      alert(JSON.stringify(values, null, 2));",
      "      setSubmitting(false);",
      "    }, 1000);",
      "  },",
      "",
      "  displayName: 'BasicForm',",
      "})(${2:MyForm});"
    ],
    "scope": "javascript,javascriptreact",
    "description": "Create a higher-order React component class that passes props and form handlers (the 'FormikBag') into your component derived from supplied options."
  }
}
