{
  "framer-import": {
    "prefix": ["framer import", "framer"],
    "body": ["import { motion } from 'framer-motion'", ""],
    "scope": "javascript,javascriptreact",
    "description": "import framer-motion"
  },
  "framer-motion": {
    "prefix": ["framer motion", "motion"],
    "body": [
      " <motion.${1:div}",
      "    initial=\"hidden\"",
      "    animate=\"visible\"",
      "    variants={${2:variants}}",
      "  ></motion.${1:div}>"
    ],
    "scope": "javascript,javascriptreact",
    "description": "framer-motion component"
  },
  "framer-variants": {
    "prefix": ["framer variants", "variants"],
    "body": [
      "  const ${1:variants} = {",
      "    hidden: {",
      "      opacity: 0,",
      "    },",
      "    visible: {",
      "      opacity: 1,",
      "      transition: {",
      "        delay: ${2:1},",
      "        duration: ${3:1},",
      "      },",
      "    },",
      "  };"
    ],
    "scope": "javascript,javascriptreact",
    "description": "framer-motion variants"
  },
  "framer-sequence": {
    "prefix": ["framer sequence", "sequence"],
    "body": [
      "const ${1:sequence} = async () => {",
      "  await ${2:animateControls}.start({ ${5:opacity: 1} })",
      "}"
    ],
    "scope": "javascript,javascriptreact",
    "description": "sequence for animation controls"
  },
  "framer-use-animation": {
    "prefix": ["framer use-animation", "use-animation"],
    "body": ["const ${controls} = useAnimation()"],
    "scope": "javascript,javascriptreact",
    "description": "useAnimation hook can be used to create a set of imperative AnimationControls with a start and stop method."
  },
  "framer-animation-controls": {
    "prefix": ["framer controls", "controls"],
    "body": ["${1:controls}.start({ ${2:opacity: 1} })"],
    "scope": "javascript,javascriptreact",
    "description": "AnimationControls with a start and stop method"
  },
  "framer-use-motion-value": {
    "prefix": ["framer use-motion-value", "use-motion-value"],
    "body": ["const ${1:scale} = useMotionValue(${2:1})"],
    "scope": "javascript,javascriptreact",
    "description": "Creates a MotionValue to track the state and velocity of a value."
  },
  "framer-use-transform": {
    "prefix": ["framer use-transform", "use-transform"],
    "body": ["const ${1:y} = useTransform(${2:x}, value => value * 2)"],
    "scope": "javascript,javascriptreact",
    "description": "Create a MotionValue that transforms the output of another MotionValue through a function."
  },
  "framer-use-spring": {
    "prefix": ["framer use-spring", "use-spring"],
    "body": ["const ${1:x} = useSpring(${2:0}, { ${3:stiffness}: ${4:300} })"],
    "scope": "javascript,javascriptreact",
    "description": "Creates a MotionValue that, when set, will use a spring animation to animate to its new state."
  },
  "framer-use-element-scroll": {
    "prefix": ["framer use-element-scroll", "use-element-scroll"],
    "body": ["const { ${1:scrollYProgress} } = useElementScroll(${2:ref})"],
    "scope": "javascript,javascriptreact",
    "description": "useElementScroll(ref): Returns MotionValues that update when the provided element scrolls."
  },
  "framer-use-viewport-scroll": {
    "prefix": ["framer use-viewport-scroll", "use-viewport-scroll"],
    "body": ["const { ${scrollYProgress} } = useViewportScroll()"],
    "scope": "javascript,javascriptreact",
    "description": "useViewportScroll(): ScrollMotionValues Returns MotionValues that update when the viewport scrolls."
  },
  "framer-use-inverted-scale": {
    "prefix": ["framer use-inverted-scale", "use-inverted-scale"],
    "body": ["const { ${1:scaleX}, ${2:scaleY} } = useInvertedScale()"],
    "scope": "javascript,javascriptreact",
    "description": "useInvertedScale(scale): ScaleMotionValues Returns a MotionValue each for scaleX and scaleY that update with the inverse of their respective parent scales."
  },
  "framer-use-cycle": {
    "prefix": ["framer use-cycle", "use-cycle"],
    "body": [
      "const [${1:x}, ${2:cycleX}] = useCycle(${3:0}, ${4:50}, ${5:100})"
    ],
    "scope": "javascript,javascriptreact",
    "description": "useCycle(items): CycleState It works similar to useState in React. It is provided an initial array of possible states, and returns an array of two arguments."
  },
  "framer-use-reduce-motion": {
    "prefix": ["framer use-reduce-motion", "use-reduce-motion"],
    "body": ["const ${shouldReduceMotion} = useReducedMotion()"],
    "scope": "javascript,javascriptreact",
    "description": "A hook that returns true if we should be using reduced motion based on the current device's Reduced Motion setting."
  },
  "framer-use-presence": {
    "prefix": ["framer use-presence", "use-presence"],
    "body": ["const [${1:isPresent}, ${2:safeToRemove}] = usePresence()"],
    "scope": "javascript,javascriptreact",
    "description": "If isPresent is false, it means that a component has been removed the tree, but AnimatePresence won't really remove it until safeToRemove has been called."
  },
  "framer-use-drag-controls": {
    "prefix": ["framer use-drag-controls", "use-drag-controls"],
    "body": ["const ${dragControls} = useDragControls()"],
    "scope": "javascript,javascriptreact",
    "description": "By creating a dragControls using the useDragControls hook, we can pass this into the draggable component's dragControls prop."
  },
  "framer-animate-presence": {
    "prefix": ["framer animate-presence", "animate-presence"],
    "body": [
      "import { motion, AnimatePresence } from \"framer-motion\"",
      "",
      "export const ${1:MyComponent} = ({ ${2:isVisible} }) => (",
      "  <AnimatePresence>",
      "    {${2:isVisible} && (",
      "      <motion.div",
      "        initial={{ opacity: 0 }}",
      "        animate={{ opacity: 1 }}",
      "        exit={{ opacity: 0 }}",
      "      />",
      "    )}",
      "  </AnimatePresence>",
      ")"
    ],
    "scope": "javascript,javascriptreact",
    "description": "AnimatePresence allows components to animate out when they're removed from the React tree."
  },
  "framer-animate-shared-layout": {
    "prefix": ["framer animate-shared-layout", "animate-shared-layout"],
    "body": [
      "import { motion, AnimateSharedLayout } from \"framer-motion\"",
      "",
      "export const ${1:MyComponent} = ({ ${2:items}, ${3:selectedId} }) => (",
      "  <AnimateSharedLayout>",
      "    {${2:items}.map(item => (",
      "      <li>",
      "        {item.title}",
      "        {item.id === ${3:selectedId} && (",
      "          <motion.div layoutId=\"underline\" />",
      "        )}",
      "      </li>",
      "    ))}",
      "  </AnimateSharedLayout>",
      ")"
    ],
    "scope": "javascript,javascriptreact",
    "description": "Animate between different components that share a layout ID"
  }
}
